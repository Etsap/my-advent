input = ""
File.open("input19.txt", 'r') {|f| input = f.read}

if false
    def execute(program, ipr, registers)
        ip = 0
        loop do
            line = program[ip]
            opcode, input1, input2, output =line[:opcode], line[:input1], line[:input2], line[:output]
            registers[ipr] = ip
            if opcode == "addr"
                registers[output] = registers[input1] + registers[input2]
            elsif opcode == "addi"
                registers[output] = registers[input1] + input2
            elsif opcode == "mulr"
                registers[output] = registers[input1] * registers[input2]
            elsif opcode == "muli"
                registers[output] = registers[input1] * input2
            elsif opcode == "banr"
                registers[output] = registers[input1] & registers[input2]
            elsif opcode == "bani"
                registers[output] = registers[input1] & input2
            elsif opcode == "borr"
                registers[output] = registers[input1] | registers[input2]
            elsif opcode == "bori"
                registers[output] = registers[input1] | input2
            elsif opcode == "setr"
                registers[output] = registers[input1]
            elsif opcode == "seti"
                registers[output] = input1
            elsif opcode == "gtir"
                registers[output] = input1 > registers[input2] ? 1 : 0
            elsif opcode == "gtri"
                registers[output] = registers[input1] > input2 ? 1 : 0
            elsif opcode == "gtrr"
                registers[output] = registers[input1] > registers[input2] ? 1 : 0
            elsif opcode == "eqir"
                registers[output] = input1 == registers[input2] ? 1 : 0
            elsif opcode == "eqri"
                registers[output] = registers[input1] == input2 ? 1 : 0
            elsif opcode == "eqrr"
                registers[output] = registers[input1] == registers[input2] ? 1 : 0
            end
            ip = registers[ipr]
            ip += 1
            break unless program[ip]
        end
    end
    program, registers = input.split(/\n/), [0] * 6
    ipr = program.delete_at(0).match(/#ip (\d)/).captures[0].to_i
    program.each_index do |i|
        opcode, input1, input2, output = program[i].match(/(....) (\d+) (\d+) (\d+)/).captures
        input1, input2, output = input1.to_i, input2.to_i, output.to_i
        program[i] = {:opcode => opcode, :input1 => input1, :input2 => input2, :output => output}
    end
    execute(program, ipr, registers)
    part1 = registers[0]
    puts "Part 1: #{part1} (#{part1 == 1872 ? 'correct' : 'incorrect!'})"

    registers = [0] * 6
    registers[0] = 1
    execute(program, ipr, registers)
    part2 = registers[0]
    puts "Part 2: #{part2} (#{part2 == 18992592 ? 'correct' : 'incorrect!'})"
end

# Generated by reverse-engineering the inputs.
def sum_factors(value)
    sum = 0
    for i in 1..value
        sum += i if value % i == 0
    end
    return sum
end
part1 = sum_factors(1030)
part2 = sum_factors(10551430)
puts "Part 1: #{part1} (#{part1 == 1872 ? 'correct' : 'incorrect!'})"
puts "Part 2: #{part2} (#{part2 == 18992592 ? 'correct' : 'incorrect!'})"
